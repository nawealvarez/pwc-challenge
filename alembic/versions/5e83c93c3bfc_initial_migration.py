"""Initial migration

Revision ID: 5e83c93c3bfc
Revises: 
Create Date: 2025-04-15 21:51:51.502864

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5e83c93c3bfc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First drop tables with foreign key dependencies
    op.execute('DROP TABLE IF EXISTS enrollments CASCADE')
    
    # Drop courses table before teachers (since courses depends on teachers)
    op.execute('DROP TABLE IF EXISTS courses CASCADE')
    
    # Now we can safely drop the teachers table
    op.execute('DROP TABLE IF EXISTS teachers CASCADE')
    
    # Finally drop the students table
    op.execute('DROP TABLE IF EXISTS students CASCADE')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('students',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('students_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='students_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_students_id', 'students', ['id'], unique=False)
    op.create_index('ix_students_email', 'students', ['email'], unique=True)
    op.create_table('teachers',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('teachers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='teachers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_teachers_id', 'teachers', ['id'], unique=False)
    op.create_table('courses',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('teacher_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], name='courses_teacher_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='courses_pkey')
    )
    op.create_index('ix_courses_title', 'courses', ['title'], unique=False)
    op.create_index('ix_courses_id', 'courses', ['id'], unique=False)
    op.create_table('enrollments',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='enrollments_course_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], name='enrollments_student_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='enrollments_pkey')
    )
    op.create_index('ix_enrollments_id', 'enrollments', ['id'], unique=False)
    # ### end Alembic commands ###